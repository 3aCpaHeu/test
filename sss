import { ExponentialCost, FreeCost, LinearCost } from "./api/Costs";
import { Localization } from "./api/Localization";
import { BigNumber } from "./api/BigNumber";
import { theory } from "./api/Theory";
import { Utils } from "./api/Utils";

var id = "nothing";
var name = "not very bad or good theory";
var description = "idk";
var authors = "me and XLII helps me";
var version = 0.1;

var currency;
var r;
var x = BigNumber.from(0.5101);

var init = () => {
    currency = theory.createCurrency();

    //r
    {
        let getDesc = (level) => "r=" + getR(level).toString(2);
        let getInfo = (level) => "r=" + getR(level).toString(2);
        r = theory.createUpgrade(0, currency, new FreeCost());
        r.getDescription = (amount) => Utils.getMath(getDesc(r.level));
        r.getInfo = (amount) => Utils.getMathTo(getInfo(r.level), getInfo(r.level + amount));
        r.level = 200;
    }

    theory.createPublicationUpgrade(0, currency, 0.5);
    theory.createBuyAllUpgrade(1, currency, 0.5);
    theory.createAutoBuyerUpgrade(2, currency, 0.5);

    updateAvailability();
}

var updateAvailability = () => {
    
}

var tick = (elapsedTime, multiplier) => {
    let bonus = theory.publicationMultiplier;
    x = getR(r.level)*x*(1-x)
    currency.value = bonus * x;

    theory.invalidateTertiaryEquation();
}

var postPublish = () => {
    x = 0.5101;
}

var getPrimaryEquation = () => {
    let result = "x_n_+_1 = rx_n(1-x_n)";
    return result;
}

var getSecondaryEquation = () => "\\rho =x," + theory.latexSymbol + "=\\max\\rho";

var getPublicationMultiplier = (tau) => tau.pow(2)+1;
var getPublicationMultiplierFormula = (symbol) => "{" + symbol + "}^{2}";
var getTau = () => currency.value;
var get2DGraphValue = () => (currency.value.abs()).toNumber();

var getR = (level) => BigNumber.from(level*0.01);

init();
